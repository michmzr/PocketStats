buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "com.heroku.sdk.heroku-gradle" version "3.0.0"
}

apply plugin: "jacoco"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    mapstructVersion = "1.5.3.Final"
    jacksonVersion = "2.17.0"
    lombokVersion = "1.18.20"
    lombokMapstructBindingVersion = "0.2.0"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'commons-validator:commons-validator:1.8.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.hibernate:hibernate-validator:8.0.0.Final'
    implementation 'org.springframework.boot:spring-boot-starter-cache:3.0.5'
    implementation 'org.springframework:spring-context-support:6.0.8'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'

    //	Tests
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.apache.groovy:groovy-all:4.0.10'
    testImplementation 'org.apache.groovy:groovy-json:4.0.10'
    testImplementation('org.spockframework:spock-core:2.4-M1-groovy-4.0')
    testImplementation('org.spockframework:spock-spring:2.4-M1-groovy-4.0')
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.2'

    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.6.1'

    testImplementation 'org.testcontainers:testcontainers:1.17.6'
    testImplementation "org.testcontainers:spock:1.17.6"
    testImplementation "org.testcontainers:mongodb:1.17.6"
}

dependencyManagement {
    imports {
    }
}

test {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

// Task to handle frontend dependencies and build
task npmInstall(type: Exec) {
    enabled = !gradle.startParameter.taskNames.any { it.contains('test') }
    workingDir './src/frontend/'
    commandLine 'npm', 'install'
}

task vueBuild(type: Exec) {
    enabled = !gradle.startParameter.taskNames.any { it.contains('test') }
    dependsOn 'npmInstall'
    workingDir './src/frontend/'
    commandLine 'npm', 'exec', 'vue-cli-service', 'build'
}

task copyFrontendToBuild(type: Copy) {
    enabled = !gradle.startParameter.taskNames.any { it.contains('test') }
    dependsOn 'vueBuild'
    from "$projectDir/src/frontend/dist/"
    into "$buildDir/resources/main/static"
}

processResources {
    enabled = !gradle.startParameter.taskNames.any { it.contains('test') }
    dependsOn 'copyFrontendToBuild'
}

bootJar {
    archiveFileName = "app.jar"
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
task copyToLib(type: Copy) {
    into "$buildDir/libs"
}
stage.dependsOn(copyToLib)
